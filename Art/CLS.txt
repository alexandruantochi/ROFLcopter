// ROFLcopter.cpp : Defines the entry point for the console application.
//

/*string text;
	
	*/

#include "stdafx.h"
#include <iostream>
#include <stdio.h>
#include <time.h>
#include <windows.h>
#include <string>
#include <fstream>
#include <iomanip>
#include <conio.h>

using namespace std;

const char ROFLcopter[] = R"( :LOL:LOL:LOL:LOL:LOL:LOL
           |
 L    /---------
 O=====       []\
 L     \         \
        \_______-+|
       ____T____T___/)";

int difficulty = 1;
int yU, yD, xO,score;
bool collision = false;

void gotoxy(int x, int y)
{
	COORD coord;
	coord.X = x;
	coord.Y = y;
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

void startScreen() {
	string text;
	int x, y;
	x = 0;
	y = 15;
	bool exit = false;
	ifstream ecranPrincipal, animation1, animation2;
	ecranPrincipal.open("F:\\Scoala\\Anul I\\Sem I\\IP\\ROFLcopter\\Art\\startScreen.txt");
	animation1.open("F:\\Scoala\\Anul I\\Sem I\\IP\\ROFLcopter\\Art\\animation1.txt");
	animation2.open("F:\\Scoala\\Anul I\\Sem I\\IP\\ROFLcopter\\Art\\animation2.txt");
	do {
		gotoxy(0, y);
		while (!ecranPrincipal.eof()) {
			getline(ecranPrincipal, text);
			cout << setw(55) << "";
			cout << text << endl;
		}
		ecranPrincipal.seekg(0);
		while (!animation1.eof()) {
			getline(animation1, text);
			cout << setw(90) << "";
			cout << text << endl;
		}
		animation1.seekg(0);
		cout << endl;
		cout << setw(120) << "PRESS ANY KEY TO CONTINUE...";
		Sleep(100);
		system("CLS");
		gotoxy(0, y);
		while (!ecranPrincipal.eof()) {
			getline(ecranPrincipal, text);
			cout << setw(55) << "";
			cout << text << endl;
		}
		ecranPrincipal.seekg(0);
		while (!animation2.eof()) {
			getline(animation2, text);
			cout << setw(90) << "";
			cout << text << endl;
		}
		animation2.seekg(0);
		cout << endl;
		cout << setw(120) << "PRESS ANY KEY TO CONTINUE...";
		Sleep(100);
		system("CLS");
	} while (_kbhit() == 0);
	
};

void chooseDif() {
	system("CLS");
	int x = 0;
	gotoxy(100, 20);
	cout << "CHOOSE DIFFICULTY" << endl;
	gotoxy(100, 22);
	cout << "1 - NORMAL" << endl;
	gotoxy(100, 24);
	cout << "2 - HARD" << endl;
	gotoxy(100, 26);
	cout << "3 - EPILEPTIC" << endl;
	cin >> x;
	switch (x) {
	case 1:
		difficulty = 1;
		break;
	case 2:
		difficulty = 2;
		break;
	case 3:
		difficulty = 3;
		break;
	default:
		chooseDif();
		break;
	}
};

void resetxO() {
	srand(time(NULL));
	yU = rand() % 30 + 10 - difficulty;
	yD = yU +18 - 2* difficulty;
	xO = 210;
	score++;
}

void animation(int yC,int xO) {
	int xC = 10;
	gotoxy(xC, yC + 1);
	cout << "           |";
	gotoxy(xC, yC + 2);
	cout << " L    /---------";
	gotoxy(xC, yC + 3);
	cout << " O=====       []\\";
	gotoxy(xC, yC + 4);
	cout << " L     \\         \\";
	gotoxy(xC, yC + 5);
	cout << "        \\_______-+|";
	gotoxy(xC, yC + 6);
	cout << "       ____T____T___/)";
	gotoxy(xC, yC);
	cout << "            LOL:LOL:LOL";
	Sleep(50);
	gotoxy(xC, yC);
	cout << "LOL:LOL:LOL:           ";
	Sleep(50);
	gotoxy(xC, yC);
	cout << "            LOL:LOL:LOL";
	for (int i = 0;i < 51;i++)
		if (i <= yU || i >= yD) {
			gotoxy(xO, i);
			cout << "WTF:WTF:WTF";
		}
};


void play() {
	score = 0;
	system("CLS");
	chooseDif();
	system("CLS");
	int d = difficulty;
	int xC = 10, yC = 10;
	collision = false;
	resetxO();
	while (!collision) {
		animation(yC, xO);
		yC++;
		xO -= 5*difficulty;
		if (xO < 10) resetxO();
		if (_kbhit()) {
			_getch();
			yC -= 3;
		}
		gotoxy(0, 50);
		cout << "SCORE:" << score;
		system("CLS");
		if (yC > 45 || yC<1) collision = true;
	}
	cout << "GAME OVER";
};




void scoreBoard() {};
void credits() {};



void startMenu() {
	system("CLS");
	int x=0;
	gotoxy(100, 20);
	cout << "MENU" << endl;
	gotoxy(100, 22);
	cout << "1 - PLAY" << endl;
	gotoxy(100, 24);
	cout << "2 - SCOREBOARD" << endl;
	gotoxy(100, 26);
	cout  <<"3 - CREDITS" << endl;
	cin >> x;
	switch (x) {
	case 1:
		play();
		break;
	case 2:
		scoreBoard();
		break;
	case 3:
		credits();
		break;
	default:
		startMenu();
		break;
	}

};



int main()
{
	system("Color 1A");
	system("Mode 650");
	//startScreen();
	//startMenu();
	play();


	system("pause");
    return 0;
}

